#!/bin/bash
#
# OpenAFS client startup script
#
PATH=/bin:/usr/bin:/sbin:/usr/sbin

CACHEINFO=${CACHEINFO:-/etc/openafs/cacheinfo}

. /etc/rc.conf
. /etc/rc.d/functions

# Gather up options and post startup script name, if present
if [ -f /etc/openafs/afs.conf ]; then
    . /etc/openafs/afs.conf
fi

if [ -f /etc/openafs/afs.conf.client ]; then
    . /etc/openafs/afs.conf.client
fi

# Check if the argument is "true".
is_on() {
    [ x"$1" == x"true" ]
}

# Determine which afsd options to use.  /etc/openafs/afs.conf contains the
# settings that are checked here.
choose_afsd_options() {
    if [ -z "$OPTIONS" ] || [ "$OPTIONS" = "AUTOMATIC" ] ; then
        AFSD_OPTIONS="$VERBOSE"
    else
        AFSD_OPTIONS="$OPTIONS $VERBOSE"
    fi

    # These variables are from /etc/openafs/afs.conf.client
    if is_on $AFS_AFSDB ; then
        AFSD_OPTIONS="$AFSD_OPTIONS -afsdb"
    fi
    if is_on $AFS_DYNROOT ; then
        AFSD_OPTIONS="$AFSD_OPTIONS -dynroot"
    fi
    if is_on $AFS_FAKESTAT ; then
        AFSD_OPTIONS="$AFSD_OPTIONS -fakestat"
    fi
}

PID=`pidof -o %PPID afsd`

case "$1" in
start)
    # Start afsd.  Be careful not to start it if another one is already running,
    # as that has a bad tendency to hang the system.
    stat_busy "Starting OpenAFS"
    if [ -z "$PID" ]; then
        choose_afsd_options
        stat_append "with $AFSD_OPTIONS"
        modprobe openafs && afsd $AFSD_OPTIONS &> /dev/null
    else
        stat_append "...afsd already running"
        stat_die
    fi

    if [ $? -gt 0 ]; then
        # would not start
        stat_fail
    else
        add_daemon openafs
        # From /etc/openafs/afs.conf.client, whether to enable fcrypt encryption.
        if is_on $AFS_CRYPT ; then
            fs setcrypt on
        fi
        # From /etc/openafs/afs.conf, set a sysname list if one was configured.
        if [ -n "$AFS_SYSNAME" ] ; then
            fs sysname $AFS_SYSNAME
        fi
        $AFS_POST_INIT

        stat_done
    fi
    ;;

stop)
    stat_busy "Stopping OpenAFS"

    $AFS_PRE_SHUTDOWN

    if mount | grep -q '^AFS' ; then
        umount /afs
    fi

    if [ ! -z "$PID" ]; then
        afsd -shutdown &> /dev/null
    fi

    if [ $? -gt 0 ]; then
      stat_fail
    else
      rmmod openafs
      rm_daemon openafs
      stat_done
    fi
    ;;

restart)
    "$0" stop
    sleep 1
    "$0" start
    ;;
*)
    echo "usage: $0 {start|stop|restart}" >&2
    exit 1

esac

